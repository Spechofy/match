name: CI match microservice

on:
  push:
    branches:
      - develop
      - feature/*
  pull_request:
    branches:
      - develop

jobs:

  lint:
    name: Code Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install flake8
        run: pip install flake8

      - name: Run Flake8 Linter
        run: flake8 --max-line-length=120 --exclude=venv

  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Unit Tests
        run: pytest ./tests --junitxml=report.xml

  
  build:
    name: Build Docker Image and Push
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile  # Si ton Dockerfile n'est pas Ã  la racine, ajuste le chemin
          tags: ${{ secrets.DOCKER_USERNAME }}/matchs-fastapi:latest
          push: true  # Pousser l'image vers Docker Hub